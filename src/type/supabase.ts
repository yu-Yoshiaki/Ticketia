/* eslint-disable @typescript-eslint/no-empty-interface */
/* eslint-disable @typescript-eslint/naming-convention */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/subscriptions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subscriptions.id"];
          user_id?: parameters["rowFilter.subscriptions.user_id"];
          status?: parameters["rowFilter.subscriptions.status"];
          metadata?: parameters["rowFilter.subscriptions.metadata"];
          price_id?: parameters["rowFilter.subscriptions.price_id"];
          quantity?: parameters["rowFilter.subscriptions.quantity"];
          cancel_at_period_end?: parameters["rowFilter.subscriptions.cancel_at_period_end"];
          created?: parameters["rowFilter.subscriptions.created"];
          current_period_start?: parameters["rowFilter.subscriptions.current_period_start"];
          current_period_end?: parameters["rowFilter.subscriptions.current_period_end"];
          ended_at?: parameters["rowFilter.subscriptions.ended_at"];
          cancel_at?: parameters["rowFilter.subscriptions.cancel_at"];
          canceled_at?: parameters["rowFilter.subscriptions.canceled_at"];
          trial_start?: parameters["rowFilter.subscriptions.trial_start"];
          trial_end?: parameters["rowFilter.subscriptions.trial_end"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["subscriptions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** subscriptions */
          subscriptions?: definitions["subscriptions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subscriptions.id"];
          user_id?: parameters["rowFilter.subscriptions.user_id"];
          status?: parameters["rowFilter.subscriptions.status"];
          metadata?: parameters["rowFilter.subscriptions.metadata"];
          price_id?: parameters["rowFilter.subscriptions.price_id"];
          quantity?: parameters["rowFilter.subscriptions.quantity"];
          cancel_at_period_end?: parameters["rowFilter.subscriptions.cancel_at_period_end"];
          created?: parameters["rowFilter.subscriptions.created"];
          current_period_start?: parameters["rowFilter.subscriptions.current_period_start"];
          current_period_end?: parameters["rowFilter.subscriptions.current_period_end"];
          ended_at?: parameters["rowFilter.subscriptions.ended_at"];
          cancel_at?: parameters["rowFilter.subscriptions.cancel_at"];
          canceled_at?: parameters["rowFilter.subscriptions.canceled_at"];
          trial_start?: parameters["rowFilter.subscriptions.trial_start"];
          trial_end?: parameters["rowFilter.subscriptions.trial_end"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subscriptions.id"];
          user_id?: parameters["rowFilter.subscriptions.user_id"];
          status?: parameters["rowFilter.subscriptions.status"];
          metadata?: parameters["rowFilter.subscriptions.metadata"];
          price_id?: parameters["rowFilter.subscriptions.price_id"];
          quantity?: parameters["rowFilter.subscriptions.quantity"];
          cancel_at_period_end?: parameters["rowFilter.subscriptions.cancel_at_period_end"];
          created?: parameters["rowFilter.subscriptions.created"];
          current_period_start?: parameters["rowFilter.subscriptions.current_period_start"];
          current_period_end?: parameters["rowFilter.subscriptions.current_period_end"];
          ended_at?: parameters["rowFilter.subscriptions.ended_at"];
          cancel_at?: parameters["rowFilter.subscriptions.cancel_at"];
          canceled_at?: parameters["rowFilter.subscriptions.canceled_at"];
          trial_start?: parameters["rowFilter.subscriptions.trial_start"];
          trial_end?: parameters["rowFilter.subscriptions.trial_end"];
        };
        body: {
          /** subscriptions */
          subscriptions?: definitions["subscriptions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/products": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.products.id"];
          active?: parameters["rowFilter.products.active"];
          name?: parameters["rowFilter.products.name"];
          description?: parameters["rowFilter.products.description"];
          image?: parameters["rowFilter.products.image"];
          metadata?: parameters["rowFilter.products.metadata"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["products"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** products */
          products?: definitions["products"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.products.id"];
          active?: parameters["rowFilter.products.active"];
          name?: parameters["rowFilter.products.name"];
          description?: parameters["rowFilter.products.description"];
          image?: parameters["rowFilter.products.image"];
          metadata?: parameters["rowFilter.products.metadata"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.products.id"];
          active?: parameters["rowFilter.products.active"];
          name?: parameters["rowFilter.products.name"];
          description?: parameters["rowFilter.products.description"];
          image?: parameters["rowFilter.products.image"];
          metadata?: parameters["rowFilter.products.metadata"];
        };
        body: {
          /** products */
          products?: definitions["products"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/prices": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.prices.id"];
          product_id?: parameters["rowFilter.prices.product_id"];
          active?: parameters["rowFilter.prices.active"];
          description?: parameters["rowFilter.prices.description"];
          unit_amount?: parameters["rowFilter.prices.unit_amount"];
          currency?: parameters["rowFilter.prices.currency"];
          type?: parameters["rowFilter.prices.type"];
          interval?: parameters["rowFilter.prices.interval"];
          interval_count?: parameters["rowFilter.prices.interval_count"];
          trial_period_days?: parameters["rowFilter.prices.trial_period_days"];
          metadata?: parameters["rowFilter.prices.metadata"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["prices"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** prices */
          prices?: definitions["prices"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.prices.id"];
          product_id?: parameters["rowFilter.prices.product_id"];
          active?: parameters["rowFilter.prices.active"];
          description?: parameters["rowFilter.prices.description"];
          unit_amount?: parameters["rowFilter.prices.unit_amount"];
          currency?: parameters["rowFilter.prices.currency"];
          type?: parameters["rowFilter.prices.type"];
          interval?: parameters["rowFilter.prices.interval"];
          interval_count?: parameters["rowFilter.prices.interval_count"];
          trial_period_days?: parameters["rowFilter.prices.trial_period_days"];
          metadata?: parameters["rowFilter.prices.metadata"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.prices.id"];
          product_id?: parameters["rowFilter.prices.product_id"];
          active?: parameters["rowFilter.prices.active"];
          description?: parameters["rowFilter.prices.description"];
          unit_amount?: parameters["rowFilter.prices.unit_amount"];
          currency?: parameters["rowFilter.prices.currency"];
          type?: parameters["rowFilter.prices.type"];
          interval?: parameters["rowFilter.prices.interval"];
          interval_count?: parameters["rowFilter.prices.interval_count"];
          trial_period_days?: parameters["rowFilter.prices.trial_period_days"];
          metadata?: parameters["rowFilter.prices.metadata"];
        };
        body: {
          /** prices */
          prices?: definitions["prices"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          full_name?: parameters["rowFilter.users.full_name"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          billing_address?: parameters["rowFilter.users.billing_address"];
          payment_method?: parameters["rowFilter.users.payment_method"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          full_name?: parameters["rowFilter.users.full_name"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          billing_address?: parameters["rowFilter.users.billing_address"];
          payment_method?: parameters["rowFilter.users.payment_method"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          full_name?: parameters["rowFilter.users.full_name"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          billing_address?: parameters["rowFilter.users.billing_address"];
          payment_method?: parameters["rowFilter.users.payment_method"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/customers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers.id"];
          stripe_customer_id?: parameters["rowFilter.customers.stripe_customer_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["customers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers.id"];
          stripe_customer_id?: parameters["rowFilter.customers.stripe_customer_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.customers.id"];
          stripe_customer_id?: parameters["rowFilter.customers.stripe_customer_id"];
        };
        body: {
          /** customers */
          customers?: definitions["customers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  subscriptions: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: public.subscription_status
     * @enum {string}
     */
    status?:
      | "trialing"
      | "active"
      | "canceled"
      | "incomplete"
      | "incomplete_expired"
      | "past_due"
      | "unpaid";
    /** Format: jsonb */
    metadata?: unknown;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `prices.id`.<fk table='prices' column='id'/>
     */
    price_id?: string;
    /** Format: integer */
    quantity?: number;
    /** Format: boolean */
    cancel_at_period_end?: boolean;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    created: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    current_period_start: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    current_period_end: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    ended_at?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    cancel_at?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    canceled_at?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    trial_start?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    trial_end?: string;
  };
  products: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: boolean */
    active?: boolean;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    image?: string;
    /** Format: jsonb */
    metadata?: unknown;
  };
  prices: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `products.id`.<fk table='products' column='id'/>
     */
    product_id?: string;
    /** Format: boolean */
    active?: boolean;
    /** Format: text */
    description?: string;
    /** Format: bigint */
    unit_amount?: number;
    /** Format: text */
    currency?: string;
    /**
     * Format: public.pricing_type
     * @enum {string}
     */
    type?: "one_time" | "recurring";
    /**
     * Format: public.pricing_plan_interval
     * @enum {string}
     */
    interval?: "day" | "week" | "month" | "year";
    /** Format: integer */
    interval_count?: number;
    /** Format: integer */
    trial_period_days?: number;
    /** Format: jsonb */
    metadata?: unknown;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    full_name?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: jsonb */
    billing_address?: unknown;
    /** Format: jsonb */
    payment_method?: unknown;
  };
  customers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    stripe_customer_id?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description subscriptions */
  "body.subscriptions": definitions["subscriptions"];
  /** Format: text */
  "rowFilter.subscriptions.id": string;
  /** Format: uuid */
  "rowFilter.subscriptions.user_id": string;
  /** Format: public.subscription_status */
  "rowFilter.subscriptions.status": string;
  /** Format: jsonb */
  "rowFilter.subscriptions.metadata": string;
  /** Format: text */
  "rowFilter.subscriptions.price_id": string;
  /** Format: integer */
  "rowFilter.subscriptions.quantity": string;
  /** Format: boolean */
  "rowFilter.subscriptions.cancel_at_period_end": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.created": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.current_period_start": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.current_period_end": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.ended_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.cancel_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.canceled_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.trial_start": string;
  /** Format: timestamp with time zone */
  "rowFilter.subscriptions.trial_end": string;
  /** @description products */
  "body.products": definitions["products"];
  /** Format: text */
  "rowFilter.products.id": string;
  /** Format: boolean */
  "rowFilter.products.active": string;
  /** Format: text */
  "rowFilter.products.name": string;
  /** Format: text */
  "rowFilter.products.description": string;
  /** Format: text */
  "rowFilter.products.image": string;
  /** Format: jsonb */
  "rowFilter.products.metadata": string;
  /** @description prices */
  "body.prices": definitions["prices"];
  /** Format: text */
  "rowFilter.prices.id": string;
  /** Format: text */
  "rowFilter.prices.product_id": string;
  /** Format: boolean */
  "rowFilter.prices.active": string;
  /** Format: text */
  "rowFilter.prices.description": string;
  /** Format: bigint */
  "rowFilter.prices.unit_amount": string;
  /** Format: text */
  "rowFilter.prices.currency": string;
  /** Format: public.pricing_type */
  "rowFilter.prices.type": string;
  /** Format: public.pricing_plan_interval */
  "rowFilter.prices.interval": string;
  /** Format: integer */
  "rowFilter.prices.interval_count": string;
  /** Format: integer */
  "rowFilter.prices.trial_period_days": string;
  /** Format: jsonb */
  "rowFilter.prices.metadata": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.full_name": string;
  /** Format: text */
  "rowFilter.users.avatar_url": string;
  /** Format: jsonb */
  "rowFilter.users.billing_address": string;
  /** Format: jsonb */
  "rowFilter.users.payment_method": string;
  /** @description customers */
  "body.customers": definitions["customers"];
  /** Format: uuid */
  "rowFilter.customers.id": string;
  /** Format: text */
  "rowFilter.customers.stripe_customer_id": string;
}

export interface operations {}

export interface external {}
